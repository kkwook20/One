{
  "preproduction-script": {
    "id": "preproduction-script",
    "name": "Script",
    "group": "preproduction",
    "nodes": [
      {
        "id": "input-preproduction-script",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": [
          "worker-1749286886724"
        ],
        "connectedFrom": null,
        "code": null,
        "output": {
          "text": "Title : 어린 소년의 모험\nStory : 한 소녀이 숲속으로 모험을 떠나려 하고 있다. 오른쪽에는 쓰러져가는 옛 성의 반쪽이 남아있고 왼쪽에는 숲이 무성하고 가운데에는 길이 하나 나 있다\n가운데에 길이 하나 나 있고, 소년이 등에는 칼과 허름한 옷을 입고 그 길로 가려고 하고 있다.",
          "type": "script"
        },
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-preproduction-script",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 1038.0,
          "y": 207.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [
          "worker-1749286886724"
        ],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "worker-1749286886724",
        "type": "worker",
        "label": "Worker",
        "position": {
          "x": 436.0,
          "y": 418.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": [
          {
            "id": "task-1749286886724",
            "text": "간략한 글의 내용을 상세하고 풍부하게 다시 만들어낸다",
            "status": "pending",
            "taskStatus": "editable",
            "aiScore": 50.0
          },
          {
            "id": "task-1749286897591",
            "text": "만들어낸 내용을 character, environment, prop, asset , background, scenery, 등으로  재정리한다",
            "status": "pending",
            "taskStatus": "editable",
            "aiScore": 50.0
          },
          {
            "id": "task-1749286932041",
            "text": "재 정리한 부분을 다시 묘사하기 좋은 항목으로 나누어서 표현한다",
            "status": "pending",
            "taskStatus": "editable",
            "aiScore": 50.0
          }
        ],
        "connectedTo": [
          "output-preproduction-script",
          "worker-1749290036136"
        ],
        "connectedFrom": [
          "input-preproduction-script"
        ],
        "code": "import json\nimport requests\nimport time\n\n# Worker Implementation\n# Access input data via 'inputs' variable or get_connected_outputs()\n# Set results in 'output' variable\n\n# Get connected outputs and configuration\ndata = get_connected_outputs()\nmodel_name = current_node.get('model', 'deepseek-coder-6.7b-instruct')\nlm_studio_url = current_node.get('lmStudioUrl', 'http://localhost:1234/')\n\nprint(\"Current node:\", json.dumps(current_node, indent=2))\nprint(\"Node purpose:\", node_purpose)\nprint(\"Output format:\", output_format_description)\n\n# ========================================================================\n# 1. 일반적인 처리 코드 부분 - AI 모델을 활용한 표준화된 처리\n# ========================================================================\n\ndef call_ai_model(prompt, model=model_name, url=lm_studio_url):\n    \"\"\"AI 모델에 요청을 보내고 응답을 받는 함수\"\"\"\n    try:\n        response = requests.post(\n            f\"{url}/v1/chat/completions\",\n            json={\n                \"model\": model,\n                \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n                \"temperature\": 0.7,\n                \"max_tokens\": 2000\n            }\n        )\n        if response.status_code == 200:\n            return response.json()['choices'][0]['message']['content']\n        else:\n            print(f\"AI 모델 호출 실패: {response.status_code}\")\n            return None\n    except Exception as e:\n        print(f\"AI 모델 호출 중 오류: {str(e)}\")\n        return None\n\n# 입력 데이터 가져오기\ninput_text = \"\"\nfor key, value in data.items():\n    if isinstance(value, dict) and 'text' in value:\n        input_text += value['text'] + \"\\n\"\n    elif isinstance(value, str):\n        input_text += value + \"\\n\"\n\n# Tasks 기반 처리를 위한 프롬프트 구성\ntasks_prompt = \"\"\nif 'tasks' in current_node:\n    tasks_list = []\n    for i, task in enumerate(current_node['tasks'], 1):\n        tasks_list.append(f\"{i}. {task['text']}\")\n    tasks_prompt = \"\\n다음 작업들을 순서대로 수행하세요:\\n\" + \"\\n\".join(tasks_list)\n\n# 기본 AI 프롬프트 구성 (Node Purpose + Output Format + Tasks)\nbase_prompt = f\"\"\"\n목적: {node_purpose}\n\n입력 텍스트:\n{input_text}\n\n{tasks_prompt}\n\n출력 형식:\n{output_format_description}\n\n위의 목적과 출력 형식에 따라 입력 텍스트를 분석하고 결과를 JSON 형식으로 반환하세요.\n\"\"\"\n\n# AI 모델 호출 및 기본 처리\nprint(\"AI 모델에 기본 요청 전송 중...\")\nai_response = call_ai_model(base_prompt)\n\n# 응답 파싱\ntry:\n    if ai_response:\n        # JSON 부분만 추출 (AI가 설명과 함께 반환할 수 있음)\n        json_start = ai_response.find('{')\n        json_end = ai_response.rfind('}') + 1\n        if json_start != -1 and json_end > json_start:\n            result = json.loads(ai_response[json_start:json_end])\n        else:\n            result = {\"error\": \"JSON 형식을 찾을 수 없음\", \"raw_response\": ai_response}\n    else:\n        result = {\"error\": \"AI 응답 없음\"}\nexcept json.JSONDecodeError:\n    result = {\"error\": \"JSON 파싱 실패\", \"raw_response\": ai_response}\n\n# ========================================================================\n# 2. 특수 처리 부분 - 이야기 확장 및 대화형 상세화\n# ========================================================================\n\ndef expand_story_details(initial_result, max_iterations=3):\n    \"\"\"스토리의 세부사항을 대화형으로 확장하는 함수\"\"\"\n    expanded_result = initial_result.copy()\n    \n    # 각 카테고리별로 상세 정보가 부족한 부분 확인\n    categories_to_expand = {\n        \"chr\": [\"face\", \"personality\", \"appearance\", \"background\", \"motivation\"],\n        \"environment\": [\"atmosphere\", \"time_period\", \"weather\", \"lighting\", \"mood\"],\n        \"asset\": [\"materials\", \"textures\", \"colors\", \"sizes\", \"conditions\"],\n        \"prop\": [\"usage\", \"importance\", \"condition\", \"details\"]\n    }\n    \n    for category, details_needed in categories_to_expand.items():\n        if category not in expanded_result:\n            expanded_result[category] = {}\n        \n        # 카테고리별 대화형 확장\n        for iteration in range(max_iterations):\n            # 현재 상태 분석\n            missing_details = []\n            for detail in details_needed:\n                if category == \"chr\":\n                    # 캐릭터별로 체크\n                    for char_name in expanded_result.get(category, {}):\n                        char_data = expanded_result[category][char_name]\n                        if detail not in char_data or not char_data.get(detail):\n                            missing_details.append(f\"{char_name}의 {detail}\")\n                else:\n                    # 다른 카테고리는 전체적으로 체크\n                    if detail not in expanded_result.get(category, {}):\n                        missing_details.append(detail)\n            \n            if not missing_details:\n                break\n            \n            # 부족한 정보에 대한 구체적인 질문 생성\n            missing_details_formatted = '- ' + '\\n- '.join(missing_details)\n            detail_prompt = f\"\"\"\n            현재 {category} 카테고리의 분석 결과:\n            {json.dumps(expanded_result.get(category, {}), ensure_ascii=False, indent=2)}\n            \n            다음 세부사항들이 부족합니다: {', '.join(missing_details)}\n            \n            원본 텍스트를 다시 분석하여 다음을 추가로 추출하거나 추론해주세요:\n            1. 텍스트에 명시적으로 나타난 정보\n            2. 문맥상 추론 가능한 정보\n            3. 장르와 설정에 기반한 합리적인 추측\n            \n            특히 다음 항목들에 집중해주세요:\n            {missing_details_formatted}\n            \n            JSON 형식으로만 응답하세요.\n            \"\"\"\n            \n            detail_response = call_ai_model(detail_prompt)\n            \n            try:\n                if detail_response:\n                    json_start = detail_response.find('{')\n                    json_end = detail_response.rfind('}') + 1\n                    if json_start != -1:\n                        new_details = json.loads(detail_response[json_start:json_end])\n                        \n                        # 기존 결과와 병합\n                        if category == \"chr\":\n                            for char_name, char_details in new_details.items():\n                                if char_name not in expanded_result[category]:\n                                    expanded_result[category][char_name] = {}\n                                expanded_result[category][char_name].update(char_details)\n                        else:\n                            if category not in expanded_result:\n                                expanded_result[category] = {}\n                            expanded_result[category].update(new_details)\n                            \n            except json.JSONDecodeError:\n                print(f\"카테고리 {category} 확장 중 JSON 파싱 실패\")\n                continue\n            \n            time.sleep(0.5)  # API 호출 간격\n    \n    return expanded_result\n\ndef validate_and_fill_gaps(result):\n    \"\"\"결과의 완성도를 검증하고 빈 부분을 채우는 함수\"\"\"\n    validation_prompt = f\"\"\"\n    다음 분석 결과를 검토하고 부족한 부분을 보완해주세요:\n    \n    현재 결과:\n    {json.dumps(result, ensure_ascii=False, indent=2)}\n    \n    체크리스트:\n    1. 모든 캐릭터가 충분한 설명을 가지고 있는가?\n    2. 환경 설정이 구체적인가?\n    3. 필요한 애셋과 프롭이 모두 식별되었는가?\n    4. 각 항목이 시각화 가능한 수준으로 상세한가?\n    \n    부족한 부분이 있다면 보완하여 완성된 JSON을 반환하세요.\n    \"\"\"\n    \n    final_response = call_ai_model(validation_prompt)\n    \n    try:\n        if final_response:\n            json_start = final_response.find('{')\n            json_end = final_response.rfind('}') + 1\n            if json_start != -1:\n                return json.loads(final_response[json_start:json_end])\n    except json.JSONDecodeError:\n        pass\n    \n    return result\n\n# 특수 처리 실행\nprint(\"\\n특수 처리: 스토리 세부사항 확장 중...\")\nif result and not result.get(\"error\"):\n    # 1단계: 대화형 확장\n    expanded_result = expand_story_details(result)\n    \n    # 2단계: 검증 및 보완\n    final_result = validate_and_fill_gaps(expanded_result)\n    \n    # 3단계: 최종 형식 정리\n    output = {\n        \"chr\": final_result.get(\"chr\", {}),\n        \"environment\": final_result.get(\"environment\", {}),\n        \"asset\": final_result.get(\"asset\", {}),\n        \"prop\": final_result.get(\"prop\", {}),\n        \"metadata\": {\n            \"processed_at\": time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"model_used\": model_name,\n            \"node_id\": current_node.get(\"id\"),\n            \"processing_status\": \"success\"\n        }\n    }\nelse:\n    output = result\n\n# 처리 상태 업데이트\nif 'tasks' in current_node:\n    for task in current_node['tasks']:\n        task['status'] = 'completed'\n\nprint(\"\\n최종 출력:\")\nprint(json.dumps(output, ensure_ascii=False, indent=2))",
        "output": "Current node: {\n  \"id\": \"worker-1749286886724\",\n  \"type\": \"worker\",\n  \"label\": \"Worker\",\n  \"purpose\": \"\\uc2a4\\ud1a0\\ub9ac\\ub97c \\ud574\\uc11d\\ud558\\uc5ec \\uad6c\\uc870\\ub97c \\ubd84\\ud574\\ud558\\uc5ec \\uac01 \\ud56d\\ubaa9\\ub4e4\\uc744 \\ub9cc\\ub4e4\\uc5b4\\ub0b8\\ub2e4\\n\\ub9cc\\ub4e4\\uc5b4\\ub0b8 \\ud56d\\ubaa9\\uc744 \\uc815\\uc758\\ub41c \\ub0b4\\uc6a9\\uc73c\\ub85c \\ubd84\\ub958\\ud55c\\ub2e4.\",\n  \"outputFormat\": \"1 . chr (character, detailed, face, \\uc131\\uaca9, \\uc678\\ubaa8, \\uc131\\uc7a5\\ubc30\\uacbd\\ub4f1)\\n2.  environment (building, trees, foliage)\\n3.  asset\\n4.  prop \\n\\n\",\n  \"tasks\": [\n    {\n      \"id\": \"task-1749286886724\",\n      \"text\": \"\\uac04\\ub7b5\\ud55c \\uae00\\uc758 \\ub0b4\\uc6a9\\uc744 \\uc0c1\\uc138\\ud558\\uace0 \\ud48d\\ubd80\\ud558\\uac8c \\ub2e4\\uc2dc \\ub9cc\\ub4e4\\uc5b4\\ub0b8\\ub2e4\",\n      \"status\": \"pending\",\n      \"taskStatus\": \"editable\",\n      \"aiScore\": 50.0\n    },\n    {\n      \"id\": \"task-1749286897591\",\n      \"text\": \"\\ub9cc\\ub4e4\\uc5b4\\ub0b8 \\ub0b4\\uc6a9\\uc744 character, environment, prop, asset , background, scenery, \\ub4f1\\uc73c\\ub85c  \\uc7ac\\uc815\\ub9ac\\ud55c\\ub2e4\",\n      \"status\": \"pending\",\n      \"taskStatus\": \"editable\",\n      \"aiScore\": 50.0\n    },\n    {\n      \"id\": \"task-1749286932041\",\n      \"text\": \"\\uc7ac \\uc815\\ub9ac\\ud55c \\ubd80\\ubd84\\uc744 \\ub2e4\\uc2dc \\ubb18\\uc0ac\\ud558\\uae30 \\uc88b\\uc740 \\ud56d\\ubaa9\\uc73c\\ub85c \\ub098\\ub204\\uc5b4\\uc11c \\ud45c\\ud604\\ud55c\\ub2e4\",\n      \"status\": \"pending\",\n      \"taskStatus\": \"editable\",\n      \"aiScore\": 50.0\n    }\n  ],\n  \"model\": \"deepseek-coder-6.7b-instruct\",\n  \"lmStudioUrl\": \"http://localhost:1234/\"\n}\nNode purpose: {\"success\": true, \"output\": {\"error\": \"'charmap' codec can't encode characters in position 0-3: character maps to <undefined>\", \"type\": \"UnicodeEncodeError\"}}",
        "error": null,
        "model": "deepseek-coder-6.7b-instruct",
        "vectorDB": null,
        "purpose": "스토리를 해석하여 구조를 분해하여 각 항목들을 만들어낸다\n만들어낸 항목을 정의된 내용으로 분류한다.",
        "outputFormat": "1 . chr (character, detailed, face, 성격, 외모, 성장배경등)\n2.  environment (building, trees, foliage)\n3.  asset\n4.  prop \n\n",
        "lmStudioUrl": "http://localhost:1234/",
        "lmStudioConnectionId": "conn_1749292759",
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "worker-1749290036136",
        "type": "worker",
        "label": "Worker 1",
        "position": {
          "x": 871.0,
          "y": 715.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": [
          {
            "id": "task-1749290036136",
            "text": "",
            "status": "pending",
            "taskStatus": "editable",
            "aiScore": null
          }
        ],
        "connectedTo": null,
        "connectedFrom": [
          "worker-1749286886724"
        ],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "preproduction-storyboard": {
    "id": "preproduction-storyboard",
    "name": "Storyboard",
    "group": "preproduction",
    "nodes": [
      {
        "id": "input-preproduction-storyboard",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-preproduction-storyboard",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "preproduction-planning": {
    "id": "preproduction-planning",
    "name": "Planning",
    "group": "preproduction",
    "nodes": [
      {
        "id": "input-preproduction-planning",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-preproduction-planning",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-modeling": {
    "id": "postproduction-modeling",
    "name": "Modeling",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-modeling",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-modeling",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-rigging": {
    "id": "postproduction-rigging",
    "name": "Rigging",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-rigging",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-rigging",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-texture": {
    "id": "postproduction-texture",
    "name": "Texture",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-texture",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-texture",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-animation": {
    "id": "postproduction-animation",
    "name": "Animation",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-animation",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-animation",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-vfx": {
    "id": "postproduction-vfx",
    "name": "VFX",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-vfx",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-vfx",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-lighting-&-rendering": {
    "id": "postproduction-lighting-&-rendering",
    "name": "Lighting & Rendering",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-lighting-&-rendering",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-lighting-&-rendering",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-sound-design": {
    "id": "postproduction-sound-design",
    "name": "Sound Design",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-sound-design",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-sound-design",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "postproduction-compositing": {
    "id": "postproduction-compositing",
    "name": "Compositing",
    "group": "postproduction",
    "nodes": [
      {
        "id": "input-postproduction-compositing",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-postproduction-compositing",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "director-direction": {
    "id": "director-direction",
    "name": "Direction",
    "group": "director",
    "nodes": [
      {
        "id": "input-director-direction",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-director-direction",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  },
  "director-review": {
    "id": "director-review",
    "name": "Review",
    "group": "director",
    "nodes": [
      {
        "id": "input-director-review",
        "type": "input",
        "label": "Input",
        "position": {
          "x": 100.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": null,
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      },
      {
        "id": "output-director-review",
        "type": "output",
        "label": "Output",
        "position": {
          "x": 700.0,
          "y": 200.0
        },
        "isRunning": false,
        "isDeactivated": false,
        "tasks": null,
        "connectedTo": null,
        "connectedFrom": [],
        "code": null,
        "output": null,
        "error": null,
        "model": null,
        "vectorDB": null,
        "purpose": null,
        "outputFormat": null,
        "lmStudioUrl": null,
        "lmStudioConnectionId": null,
        "supervisedNodes": null,
        "updateHistory": null,
        "aiScore": null,
        "modificationHistory": null,
        "evaluationHistory": null,
        "plannerRecommendations": null
      }
    ],
    "inputConfig": null,
    "outputConfig": null
  }
}